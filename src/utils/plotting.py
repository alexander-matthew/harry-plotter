"""Plotting utilities for the CNC Pen Plotter application."""
from __future__ import annotations

import logging
from datetime import datetime
from typing import Iterable

import numpy as np
import plotly.graph_objects as go

from src.constants import PlotSettings

logger = logging.getLogger(__name__)


def create_image_figure(img, title: str) -> go.Figure:
    """Create a Plotly figure from a PIL image."""
    if img is None:
        fig = go.Figure()
    else:
        img_array = np.array(img)
        fig = go.Figure(
            data=go.Heatmap(
                z=img_array,
                colorscale='gray',
                showscale=False,
                hoverinfo='skip',
            )
        )

    fig.update_layout(
        title=title,
        xaxis=dict(visible=False, scaleanchor='y', scaleratio=1),
        yaxis=dict(visible=False, autorange='reversed'),
        margin=dict(l=0, r=0, t=30, b=0),
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        height=400,
    )
    return fig


def create_empty_figure() -> go.Figure:
    """Create an empty figure for initialization."""
    fig = go.Figure()
    fig.update_layout(
        xaxis=dict(visible=False),
        yaxis=dict(visible=False),
        margin=dict(l=0, r=0, t=0, b=0),
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
    )
    return fig


def generate_gcode(paths: Iterable[tuple[int, int]], plot_settings: PlotSettings) -> str:
    """Generate G-code from vector paths."""
    # Mock implementation
    logger.debug("Generating G-code with settings: %s", plot_settings)
    gcode = f"""; Generated by Pen Plotter UI
G90 ; Absolute positioning
G21 ; Units in mm
G0 Z{plot_settings.pen_lift_height} ; Pen up
G0 X0 Y0 ; Home
G0 Z0 ; Pen down
G1 X10 Y10 F{plot_settings.feed_rate}
G1 X20 Y20 F{plot_settings.feed_rate}
G0 Z{plot_settings.pen_lift_height} ; Pen up
M30 ; End
"""
    return gcode


def generate_svg(paths: Iterable[tuple[int, int]], plot_settings: PlotSettings) -> str:
    """Generate SVG from vector paths."""
    # Mock implementation
    width = plot_settings.width
    height = plot_settings.height
    svg = f'''<svg width="{width}" height="{height}" xmlns="http://www.w3.org/2000/svg">
  <path d="M 10 10 L 90 90" stroke="black" fill="none"/>
  <path d="M 90 10 L 10 90" stroke="black" fill="none"/>
</svg>'''
    return svg


def create_download_data(content: str, file_type: str) -> dict:
    """Create download data with timestamp."""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"plot_{timestamp}.{file_type}"
    return {"content": content, "filename": filename}

