"""
Plotting utilities for the CNC Pen Plotter application.
"""
import plotly.graph_objects as go
import numpy as np
from datetime import datetime


def create_image_figure(img, title):
    """Create plotly figure from PIL image."""
    if img is None:
        fig = go.Figure()
    else:
        # Convert PIL to numpy array
        img_array = np.array(img)

        # Create figure
        fig = go.Figure(data=go.Heatmap(
            z=img_array,
            colorscale='gray',
            showscale=False,
            hoverinfo='skip'
        ))

    fig.update_layout(
        title=title,
        xaxis=dict(visible=False, scaleanchor='y', scaleratio=1),
        yaxis=dict(visible=False, autorange='reversed'),
        margin=dict(l=0, r=0, t=30, b=0),
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        height=400,
    )

    return fig


def create_empty_figure():
    """Create an empty figure for initialization."""
    fig = go.Figure()
    fig.update_layout(
        xaxis=dict(visible=False),
        yaxis=dict(visible=False),
        margin=dict(l=0, r=0, t=0, b=0),
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
    )
    return fig


def generate_gcode(paths, plot_settings):
    """Generate G-code from vector paths."""
    # Mock G-code generation
    gcode = f"""; Generated by Pen Plotter UI
G90 ; Absolute positioning
G21 ; Units in mm
G0 Z{plot_settings.get('pen_lift_height', 5)} ; Pen up
G0 X0 Y0 ; Home
G0 Z0 ; Pen down
G1 X10 Y10 F{plot_settings.get('feed_rate', 1000)}
G1 X20 Y20 F{plot_settings.get('feed_rate', 1000)}
G0 Z{plot_settings.get('pen_lift_height', 5)} ; Pen up
M30 ; End
"""
    return gcode


def generate_svg(paths, plot_settings):
    """Generate SVG from vector paths."""
    # Mock SVG generation
    width = plot_settings.get('width', 100)
    height = plot_settings.get('height', 100)
    
    svg = f'''<svg width="{width}" height="{height}" xmlns="http://www.w3.org/2000/svg">
  <path d="M 10 10 L 90 90" stroke="black" fill="none"/>
  <path d="M 90 10 L 10 90" stroke="black" fill="none"/>
</svg>'''
    return svg


def create_download_data(content, file_type):
    """Create download data with timestamp."""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"plot_{timestamp}.{file_type}"
    return {"content": content, "filename": filename}